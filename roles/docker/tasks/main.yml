---
- fail: msg="docker_ca_cert is undefined"
  when: (docker_client_tls or docker_server_tls) and docker_ca_cert == ''
- fail: msg="docker_tls_cert is undefined"
  when: (docker_client_tls or docker_server_tls) and docker_tls_cert == ''
- fail: msg="docker_tls_key is undefined"
  when: (docker_client_tls or docker_server_tls) and docker_tls_key == ''

- name: tweak grub settings
  lineinfile:
    dest: /etc/default/grub
    regexp: GRUB_CMDLINE_LINUX=.*
    line: GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"
  register: grubbed
  sudo: yes
  tags:
    - rebuild-docker

#- name: apply changed grub settings
#  command: update-grub
#  sudo: yes
#  when: grubbed | changed

# This pulls in the latest stable kernel
- name: install linux-image-generic
  apt: name=linux-image-generic
  tags:
    - rebuild-docker

- name: add aufs to /etc/modules
  shell: echo aufs >> /etc/modules || true
  sudo: yes
  tags:
    - rebuild-docker

- name: reboot
  command: shutdown -r now "Ansible updated grub"
  async: 0
  poll: 0
  sudo: yes
  ignore_errors: true
  when: grubbed | changed
  tags:
    - rebuild-docker

- name: wait for server to relaunch
  local_action: wait_for host={{ ansible_ssh_host }} state=started
  when: grubbed | changed
  tags:
    - rebuild-docker

# This installs the linux-image-extra package for the *current* kernel
- name: install linux-image-extra
  shell: apt-get -y install linux-image-extra-$(uname -r)
  tags:
    - rebuild-docker

- name: see if HTTPS transport is already present
  stat: path=/usr/lib/apt/methods/https get_md5=false
  register: https_transport_file
  tags:
    - rebuild-docker

- name: ensure HTTPS transport is available to apt
  apt: update_cache=yes cache_valid_time=600 name=apt-transport-https
  sudo: yes
  when: not https_transport_file.stat.exists
  tags:
    - rebuild-docker

- name: ensure the docker apt key is trusted
  apt_key:
    keyserver: hkp://keyserver.ubuntu.com:80
    #id: 36A1D7869245C8950F966E92D8576A8BA88D21E9
    id: 58118E89F3A912897C070ADBF76221572C52609D
    state: present
  sudo: yes
  tags:
    - rebuild-docker

- name: ensure the docker apt repository is present
  apt_repository:
#    repo: deb https://get.docker.com/ubuntu docker main
    repo: deb https://apt.dockerproject.org/repo ubuntu-trusty main
    state: present
  sudo: yes
  tags:
    - rebuild-docker

#1.7.1
- name: install docker
  #apt: update_cache=yes name=lxc-docker-1.7.1
  apt: update_cache=yes name=docker-engine
  sudo: yes
  tags:
    - rebuild-docker

- name: install docker configuration
  template: src=docker_config dest=/etc/default/docker mode=0644
  sudo: yes
  tags:
    - rebuild-docker

- name: create docker TLS directory
  file: path={{ docker_tls_path }} state=directory
  sudo: yes
  when: docker_client_tls or docker_server_tls
  tags:
    - rebuild-docker
    - install-certs

- name: install docker TLS credentials
  template: src={{ item.from }} dest={{ item.to }} mode=0644
  with_items:
    - from: ca.pem.j2
      to: "{{ docker_tls_path }}/ca.pem"
    - from: key.pem.j2
      to: "{{ docker_tls_path }}/key.pem"
    - from: cert.pem.j2
      to: "{{ docker_tls_path }}/cert.pem"
  when: docker_client_tls or docker_server_tls
  tags:
    - rebuild-docker
    - install-certs

- name: restart docker
  shell: service docker restart
  sudo: yes
  tags:
    - rebuild-docker
    - install-certs

- name: docker-py
  pip: name=docker-py state=present version=1.8.1
  sudo: yes
  tags:
    - rebuild-docker

- name: stop running docker containers
  shell: docker stop $(docker ps -a -q) || true
  tags:
    - rebuild-docker

- name: remove docker containers
  shell: docker rm -v $(docker ps -a -q) || true
  tags:
    - rebuild-docker

- name: turn off docker cleanup cronjob
  cron: name="docker cleanup" state=absent
  tags:
    - rebuild-docker

- name: pull docker images
  command: docker pull {{ item }}
  with_items: docker_images
  sudo: yes
  tags:
    - rebuild-docker

- name: create cronjob docker-cleanup
  cron: name="docker cleanup" minute=15 user="root" job="/usr/local/sbin/docker-cleanup"
  tags:
  - rebuild-docker

- name: install docker cleanup script
  copy: src=docker-cleanup dest=/usr/local/sbin/docker-cleanup mode=0744
  sudo: yes
  tags:
  - rebuild-docker

- name: add user running the Datadog Agent to docker's group
  shell: usermod -a -G docker dd-agent

- name: configure the Datadog Agent to connect to Docker
  shell: cp /etc/dd-agent/conf.d/docker_daemon.yaml.example /etc/dd-agent/conf.d/docker_daemon.yaml
  sudo: yes

- name: add new tag names line to docker_daemon.yaml
  shell: 'sed -i ''31 i \ \ \ \ new_tag_names: true'' /etc/dd-agent/conf.d/docker_daemon.yaml'
  sudo: yes

- name: restart Datadog Agent
  shell: /etc/init.d/datadog-agent restart
  sudo: yes

